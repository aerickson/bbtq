#!/usr/bin/env python

import argparse
import pprint
import toml
import sys

# custom formatter to drop the string encoding indicators like u"test"
def my_safe_repr(object, context, maxlevels, level):
    typ = pprint._type(object)
    if typ is unicode:
        object = str(object)
    return pprint._safe_repr(object, context, maxlevels, level)

def main(file_path, toml_path):
    return_value = None
    printer = pprint.PrettyPrinter()
    printer.format = my_safe_repr
    data = toml.load(open(file_path))

    if toml_path == ".":
        printer.pprint(data)
        return

    split_filter = toml_path.split(".")
    filter_length = len(split_filter)
    # print(split_filter)

    # TODO: how to support arbitrary depth without a ton of elif blocks?
    if filter_length == 2:
        return_value = data[split_filter[1]]
    elif filter_length == 3:
        return_value = data[split_filter[1]][split_filter[2]]
    else:
        print("ERROR: can't handle that input yet")
        sys.exit(1)

    printer.pprint(return_value)
    sys.exit(0)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("filter")
    parser.add_argument("file")
    args = parser.parse_args()

    main(args.file, args.filter)
